const fs = require('fs');
const path = require('path');

// Funci√≥n para verificar si una imagen existe
function checkImageExists(imagePath) {
  const fullPath = path.join(__dirname, '..', 'public', imagePath);
  return fs.existsSync(fullPath);
}

// Funci√≥n para verificar URLs de im√°genes
async function checkImageUrl(url) {
  try {
    const response = await fetch(url);
    return response.ok;
  } catch (error) {
    return false;
  }
}

// Lista de im√°genes que deber√≠an existir
const requiredImages = [
  '/images/placeholder.svg',
  '/images/hero-bg.jpg',
  '/images/categories/bangles-featured.jpg'
];

// Verificar im√°genes locales
console.log('üîç Verificando im√°genes locales...');
requiredImages.forEach(imagePath => {
  const exists = checkImageExists(imagePath);
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${imagePath} ${exists ? 'existe' : 'NO EXISTE'}`);
});

// Verificar configuraci√≥n de Next.js
const nextConfigPath = path.join(__dirname, '..', 'next.config.js');
if (fs.existsSync(nextConfigPath)) {
  console.log('\nüîç Verificando configuraci√≥n de Next.js...');
  const nextConfig = require(nextConfigPath);
  
  if (nextConfig.images && nextConfig.images.domains) {
    console.log('‚úÖ Dominios configurados:', nextConfig.images.domains);
  } else {
    console.log('‚ùå No hay dominios configurados para im√°genes');
  }
  
  if (nextConfig.images && nextConfig.images.remotePatterns) {
    console.log('‚úÖ Patrones remotos configurados:', nextConfig.images.remotePatterns.length);
  } else {
    console.log('‚ùå No hay patrones remotos configurados');
  }
}

console.log('\nüí° Recomendaciones:');
console.log('1. Aseg√∫rate de que todas las im√°genes locales existan en /public/images/');
console.log('2. Verifica que las URLs de WooCommerce sean accesibles');
console.log('3. Considera usar un CDN para mejorar el rendimiento de las im√°genes');
console.log('4. Optimiza las im√°genes para web (formato WebP, tama√±os apropiados)');
